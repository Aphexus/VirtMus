<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See harness/README in the NetBeans platform -->
<!-- for some information on what you could do (e.g. targets to override). -->
<!-- If you delete this file and reopen the project it will be recreated. -->
<project name="VirtMus" basedir=".">
    <description>Builds the module suite VirtMus.</description>
    <import file="nbproject/build-impl.xml"/>

    <!-- Set the operating system test properties. On Mac OS X, both isMac and 
    isUnix will be set to true, and isWindows will be undefined. -->
    <condition property="isMac">
        <os family="mac" />
    </condition>
    <condition property="isWindows">
        <os family="windows" />
    </condition>
    <condition property="isUnix">
        <os family="unix" />
    </condition>
  
    <!--
        To automatically update the application version in the title bar.
        Must be executed manually before executing the build-zip target.
    -->
    <target name="update-version-string" depends="-init,branding,release">
        <propertyfile
            file="${basedir}/branding/core/core.jar/org/netbeans/core/startup/Bundle.properties" 
            comment="Updated by build script">
            <entry key="currentVersion" value="${app.title} ${app.version}" />
        </propertyfile>
     
        <propertyfile
            file="${basedir}/branding/modules/org-netbeans-core-windows.jar/org/netbeans/core/windows/view/ui/Bundle.properties"
            comment="Updated by build script">
            <entry key="CTL_MainWindow_Title" value="${app.title} ${app.version}" />
            <entry key="CTL_MainWindow_Title_No_Project" value="${app.title} ${app.version}" />
        </propertyfile>
     
        <propertyfile
            file="${basedir}/branding/modules/org-netbeans-core.jar/org/netbeans/core/ui/Bundle.properties" 
            comment="Updated by build script">
            <entry key="LBL_ProductInformation" value="${app.title}" />
        </propertyfile>

        <replaceregexp file="${basedir}/Installer/VirtMus.nsi"
                       match="(\s*!define\s+VERSION\s+).*"
                       replace="\1&quot;${app.version}&quot;"/>
    </target>
    
    <target name="create-docs" depends="javadoc-all" description="Converts the VirtMus.wiki documents into a static site">
        <copy file="Docs/favicon.ico" tofile="Docs/wiki.static/favicon.ico"/>
        <copy file="Docs/img/VirtMusLogo.gif" tofile="Docs/wiki.static/VirtMusLogo.gif"/>
    </target>

    <!--
        Run this target to populate dist/virtmus with the same files and config as a full install.
        The app can then be tested from dist/virtmus without doing an install.
    -->
    <target name="build-dist" depends="build-zip,create-docs" description="Adds VirtMus specific changes">
        <delete dir="dist/${app.name}"/>
        <unzip src="dist/${app.name}.zip" dest="dist"/>

        <!-- Copy our own virtmus.exe which has the virtmus icon in it -->
        <copy file="Installer/BrandedExe/virtmus.exe" tofile="dist/${app.name}/bin/virtmus.exe" overwrite="true"/>

        <!-- Need to modify shell scripts to use UNIX (LF) line terminations -->
        <fixcrlf srcDir="dist/${app.name}/etc" includes="${app.name}.conf" eof="remove" eol="unix"/>
        <chmod file="dist/${app.name}/bin/virtmus" perm="a+x"/>

        <echo message="Adding the VirtMus documentation files"/>
        <!-- TODO: Generate the static pages automatically. -->
        <copy todir="dist/${app.name}/Docs" >
            <fileset dir="Docs/wiki.static">
                <exclude name="**/src/**"/>
                <exclude name="**/wiki/**"/>
                <exclude name="**/wiki.static/public/**"/>
            </fileset>
        </copy>
    </target>
    
    <target name="create-mac-icons">
        <exec dir="${basedir}/Installer" executable="./GenerateMacIcons.sh" failonerror="true"/>        
    </target>
    
    <target name="modify-conf" depends="build-launchers">
        <echo message="modify-conf: ${app.conf} -> ${build.launcher.dir}/etc/${app.name}.conf"/>
        <copy file="Installer/BrandedExe/virtmus.exe" tofile="${build.launcher.dir}/bin/${app.name}.exe" overwrite="true"/>
        <!-- copy file="${harness.dir}/launchers/${app.exe.prefix}app64.exe" tofile="${build.launcher.dir}/bin/${app.name}64.exe" failonerror="false" overwrite="true"/ -->
    </target>
    <target name="-pre-build-zip" depends="update-version-string,modify-conf"/>
    <target name="-pre-build-mac" depends="modify-conf,create-mac-icons"/>
    <target name="build-zip" depends="-pre-build-zip,suite.build-zip" description="Builds a ZIP distribution of the suite, launchers, and selected modules from the platform.">
        <echo message="Running VirtMus custom build-zip"/>
    </target>
    <target name="build-mac" depends="-pre-build-mac,suite.build-mac" description="Builds a Mac/OSX tgz distribution of the suite, launchers, and selected modules from the platform.">
        <echo message="Running VirtMus custom build-mac"/>
    </target>
    
    <target name="build-mac-dmg" depends="build-mac,create-mac-icons"
        description="Builds a DMG file for the Mac OS X">

        <!--
        The exec calls don't pick up paths set in .bashrc/.bash_profile on Mac!
        Since 'appdmg' calls a few utilities on its own, we need to execute it with a
        proper path (as configured by the system/user). We run bash here just so we
        can extract the user configured $PATH, and later pass it to exec.
        -->
        <exec executable="bash" outputproperty="user.path" errorproperty="bash.errors" failonerror="true">
            <arg value="-i"/>
            <arg value="-l"/>
            <arg value="-c"/>
            <arg value="echo $$PATH"/>
        </exec>

        <exec dir="${basedir}/Installer" executable="/Applications/Inkscape.app/Contents/Resources/bin/inkscape">
            <arg value="--export-png"/>
            <arg value="${basedir}/Installer/DMG-Background.png"/>
            <arg value="-d"/>
            <arg value="72"/>
            <arg value="${basedir}/Installer/DMG-Background.svg"/>
        </exec>

        <!-- appdmg refuses to overwrite, so delete the target first. -->        
        <delete file="${basedir}/Installer/VirtMus-${app.version}.dmg"/>
        
        <exec dir="${basedir}/Installer" executable="appdmg" failonerror="true"
            searchpath="true" resolveexecutable="true">
            <env key="PATH" path="${user.path}" />
            <arg value="VirtMus-appdmg.json"/>
            <arg value="VirtMus-${app.version}.dmg"/>
        </exec>
        
        <!-- Clean-up temporaries. -->
        <delete file="${basedir}/Installer/DMG-Background.png"/>
    </target>
    
    <target name="create-installer-zip" depends="build-dist" description="Creates a ZIP distribution">
        <zip destfile="Installer/${app.distname}-${app.version}.zip">
            <zipfileset dir="dist/${app.name}" prefix="${app.distname}-${app.version}"/>
        </zip>
    </target>

    <target name="create-installer-exe-OnWindows" if="isWindows" depends="create-installer-zip"
        description="Builds Windows exe installer on Windows.">
        <echo message="Building exe on Windows." />
        <echo message="Exit NSIS to continue"/>
        <exec dir="Installer" executable="C:/Program Files (x86)/NSIS/makensisw.exe"
            osfamily="Windows" failonerror="true" spawn="true">
            <arg line="VirtMus.nsi"/>
        </exec>
    </target>

    <target name="create-installer-exe-OnUnix" if="isUnix" depends="create-installer-zip"
        description="Builds Windows exe installer on Unix (and Mac OS X) using makensis.">
        <!-- Mac systems are also Unix systems, so this target will run on both. -->
        <echo message="Building exe on Unix." />
        
        <!-- The base 'env' doesn't pick up paths set in .bashrc/.bash_profile on Mac. -->
        <property environment="env"/>
        <echo message="env.PATH = ${env.PATH}"/>
        
        <!--
        Can't rely on searchpath and resolveexecutable to pick up an executable
        from the user's path on Mac. Rather than try to guess, we ask bash.
        Save the makensis location in bash.out if the user has it in their path,
        and fail if they don't.
        
        See build-mac-dmg for another alternative.
        -->
        <exec executable="bash" outputproperty="makensis.path" errorproperty="bash.errors" failonerror="true">
            <arg value="-i"/>
            <arg value="-l"/>
            <arg value="-c"/>
            <arg value="which makensis"/>
        </exec>
        <!-- echo message="bash.out = ${makensis.path} ${bash.errors}" / -->

        <exec dir="Installer" executable="${makensis.path}" osfamily="Unix" failonerror="true">
            <arg line="VirtMus.nsi"/>
            <!-- We could instead add searchpath="true" and resolveexecutable="true"
            and pick a few likely paths for makensis, but it's better to rely on bash above. -->
            <!-- env key="PATH" path="/usr/local/bin:/usr/bin" / -->
        </exec>
    </target>
  
    <target name="create-installer-exe-OnMac" if="isMac" depends="create-installer-zip,create-installer-exe-OnUnix"
        description="Creates a Windows exe installer on Mac OS X using makensis.">
        <echo message="Building exe on Mac." />
        <!-- Mac systems are also Unix systems, so we defer to the OnUnix target. -->
    </target>
    
    <target name="create-installer-exe" depends="create-installer-exe-OnMac,create-installer-exe-OnWindows,create-installer-exe-OnUnix"
        description="Creates a Windows exe installer using NSIS on all platforms.">
    </target>


    <target name="create-installers" depends="update-version-string,create-installer-exe,build-mac-dmg"
        description="Creates exe, zip, and dmg application installers">
    </target>
    
    <target name="package-as-installers" depends="-init" description="Replicate what the Package as -> Installers context menu does">
        <!-- 
        This target attempts to replicate the behavior of the context menu shown
        when right-clicking on the "Virtual Music" suite and selecting the
        "Package as -> Installers" menu.
        
        The original intent was to debug the target that creates the Info.plist
        file on the Mac OSX and replaces the version string in it so that
        "Spotlight Search" and the "Get Info" context menu shows the proper
        VirtMus version. It doesn't look like this target ever calls build-mac
        in suite.xml so it's not clear how Info.plist is generated.
        
        See: NetBeans/harness/etc/Info.plist
        See: NetBeans/harness/suite.xml build-mac target
        
        When selecting the menu item, the following command is executed:
            ant -f "/Applications/NetBeans/NetBeans 8.0.2.app/Contents/Resources/NetBeans/harness/nbi/stub/template.xml"
                -Dsuite.nbi.product.uid=virtmus
                "-Dnbi.stub.common.location=/Applications/NetBeans/NetBeans 8.0.2.app/Contents/Resources/NetBeans/harness/nbi/.common"
                -Dnbi.dock.icon.file=/Users/gburca1/Documents/NetBeansProjects/VirtMus/Installer/VirtMus.icns
                "-Dnbi.engine.jar=/Applications/NetBeans/NetBeans 8.0.2.app/Contents/Resources/NetBeans/harness/modules/ext/nbi-engine.jar"
                "-Dnbi.ant.tasks.jar=/Applications/NetBeans/NetBeans 8.0.2.app/Contents/Resources/NetBeans/harness/modules/ext/nbi-ant-tasks.jar"
                "-Dnbi.registries.management.jar=/Applications/NetBeans/NetBeans 8.0.2.app/Contents/Resources/NetBeans/harness/modules/ext/nbi-registries-management.jar"
                -Dnbi.icon.file=/Users/gburca1/Documents/NetBeansProjects/VirtMus/branding/core/core.jar/org/netbeans/core/startup/frame48.gif
                -Dgenerator-jdk-location-forward-slashes=/Library/Java/JavaVirtualMachines/jdk1.8.0_31.jdk/Contents/Home
                -Dpack200.enabled=true
                -Dnbi.license.file=/var/folders/2x/njbycfbs383ffxgy8c0mh_wwbpp5gs/T/license8614309296844675394.txt
                "-Dnbi.stub.location=/Applications/NetBeans/NetBeans 8.0.2.app/Contents/Resources/NetBeans/harness/nbi/stub"
                -Dsuite.location=/Users/gburca1/Documents/NetBeansProjects/VirtMus
                "-Dgenerate.installer.for.platforms=windows linux macosx"
                build
        -->
        <ant antfile="${harness.dir}/nbi/stub/template.xml" useNativeBasedir="true" inheritAll="true" target="build">
            <property name="suite.nbi.product.uid" value="virtmus"/>
            <property name="nbi.stub.common.location" value="${harness.dir}/nbi/.common"/>
            <property name="nbi.dock.icon.file" value="${basedir}/${app.icon.icns}"/>
            <property name="nbi.engine.jar" value="${harness.dir}/modules/ext/nbi-engine.jar"/>
            <property name="nbi.ant.tasks.jar" value="${harness.dir}/modules/ext/nbi-ant-tasks.jar"/>
            <property name="nbi.registries.management.jar" value="${harness.dir}/modules/ext/nbi-registries-management.jar"/>
            <property name="nbi.icon.file" value="${basedir}/branding/core/core.jar/org/netbeans/core/startup/frame48.gif"/>
            <property name="generator-jdk-location-forward-slashes" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_31.jdk/Contents/Home"/>
            <property name="pack200.enabled" value="true"/>
            <property name="nbi.license.file" value="${basedir}/LICENSE.txt"/>
            <property name="nbi.stub.location" value="${harness.dir}/nbi/stub"/>
            <property name="suite.location" value="${basedir}"/>
            <property name="generate.installer.for.platforms" value="windows linux macosx"/>
        </ant>
    </target>

    <target name="javadoc-all" depends="-init" description="Build javadoc for several modules in the suite.">
        <property name="platformjars" value="${nbplatform.active.dir}/platform/modules/*;${nbplatform.active.dir}/platform/lib/*;${nbplatform.active.dir}/ide/modules/*;${nbplatform.active.dir}/apisupport/modules/*"/>
        <javadoc destdir="JavaDoc/" packagenames="com.ebixio.*,org.icepdf.*" encoding="UTF-8"
            classpath="${platformjars};${netbeans.dynamic.classpath}">
            <doctitle>
                <![CDATA[<h1>VirtMus JavaDoc</h1>]]>
            </doctitle>

            <classpath>
                <path path="${javac.classpath}"/>
                <path path="ICEpdf/dist/ICEpdf.jar"/>
                <path path="PDFRenderer/release/modules/ext/*"/>
                <path path="jai_java/release/modules/ext/*"/>
                <path path="XStream/release/modules/ext/*"/>
                <path path="TimingFramework/release/modules/ext/*"/>
                <path path="JOGL-Win/release/modules/ext/*"/>
                <path path="colorchooser/release/modules/ext/*"/>
                <path path="swingfx/release/modules/ext/*"/>
                <path path="batik/release/modules/ext/*"/>
                <path path="MavenJARs/dist/*"/>
            </classpath>

            <group title="VirtMus Module" packages="com.ebixio.virtmus*"/>
            <group title="Annotations Module" packages="com.ebixio.annotations*"/>
            <group title="Thumbnail Viewer Module" packages="com.ebixio.thumbviewer*"/>
            <group title="ICEpdf" packages="org.icepdf.*"/>

            <sourcepath location="Annotations/src"/>
            <sourcepath location="ThumbViewer/src"/>
            <sourcepath location="VirtMus/src"/>
            <sourcepath location="ICEpdf/icepdf/core"/>
            <sourcepath location="JAI/src"/>

            <header>VirtMus Java Docs</header>
            <bottom><![CDATA[<i>Copyright &#169; 2006-2015 Gabriel Burca. All Rights Reserved.</i>]]></bottom>

        </javadoc>
        <nbbrowse file="JavaDoc/index.html"/>
    </target>
</project>
