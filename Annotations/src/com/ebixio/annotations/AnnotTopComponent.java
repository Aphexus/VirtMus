/*
 * Copyright (C) 2006-2007  Gabriel Burca (gburca dash virtmus at ebixio dot com)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package com.ebixio.annotations;

import com.ebixio.virtmus.MainApp;
import com.ebixio.virtmus.MusicPage;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.io.File;
import java.io.Serializable;
import java.util.Collection;
import javax.media.jai.JAI;
import javax.media.jai.PlanarImage;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JSlider;
import javax.swing.SwingWorker;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import net.java.dev.colorchooser.ColorChooser;
import org.openide.ErrorManager;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;


/**
 * Top component which displays something.
 */
public final class AnnotTopComponent extends TopComponent
        implements LookupListener, ActionListener, ChangeListener, ComponentListener {
       
    private static AnnotTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "com/ebixio/annotations/annot-tab-icon.png";
    
    private static final String PREFERRED_ID = "AnnotTopComponent";
    private JComponent brushPreview;
    private Lookup.Result lookupResult = null;
    private PlanarImage source = null;
    private File currentlyShowing = new File("");

   
    private AnnotTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(AnnotTopComponent.class, "CTL_AnnotTopComponent"));
        setToolTipText(NbBundle.getMessage(AnnotTopComponent.class, "HINT_AnnotTopComponent"));
        setIcon(Utilities.loadImage(ICON_PATH, true));
        panner.setVisible(false);
        
        this.addComponentListener(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        colorChooser = new net.java.dev.colorchooser.ColorChooser();
        colorChooser.addActionListener(this);
        jLabel2 = new javax.swing.JLabel();
        jsBrushSize = new javax.swing.JSlider();
        jbClear = new javax.swing.JButton();
        jbClear.addActionListener(this);
        jSplitPane1 = new javax.swing.JSplitPane();
        canvas = new com.ebixio.annotations.AnnotCanvas();
        panner = new com.ebixio.jai.Panner();
        display = new com.ebixio.jai.ImageDisplay();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Foreground: ");
        jToolBar.add(jLabel1);

        colorChooser.setToolTipText("Foreground color");

        org.jdesktop.layout.GroupLayout colorChooserLayout = new org.jdesktop.layout.GroupLayout(colorChooser);
        colorChooser.setLayout(colorChooserLayout);
        colorChooserLayout.setHorizontalGroup(
            colorChooserLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 22, Short.MAX_VALUE)
        );
        colorChooserLayout.setVerticalGroup(
            colorChooserLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 21, Short.MAX_VALUE)
        );

        jToolBar.add(colorChooser);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, "  Brush size: ");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jToolBar.add(jLabel2);

        jsBrushSize.setMajorTickSpacing(5);
        jsBrushSize.setMaximum(24);
        jsBrushSize.setMinimum(1);
        jsBrushSize.setMinorTickSpacing(1);
        jsBrushSize.setPaintTicks(true);
        jsBrushSize.setSnapToTicks(true);
        jsBrushSize.setToolTipText("Brush size");
        jsBrushSize.setMaximumSize(new java.awt.Dimension(200, 47));
        jsBrushSize.setValue(canvas.getDiam());
        jsBrushSize.addChangeListener(this);
        jToolBar.add(jsBrushSize);
        brushPreview = canvas.createBrushSizeView();
        jToolBar.add(brushPreview);

        org.openide.awt.Mnemonics.setLocalizedText(jbClear, "Clear");
        jbClear.setToolTipText("Remove all annotations");
        jbClear.setBorderPainted(false);
        jToolBar.add(jbClear);

        jSplitPane1.setDividerLocation(3000);

        panner.setBackground(new java.awt.Color(204, 204, 255));
        panner.setMaximumSize(new java.awt.Dimension(64, 100));
        panner.setMinimumSize(new java.awt.Dimension(64, 100));
        panner.setPreferredSize(new java.awt.Dimension(64, 100));

        org.jdesktop.layout.GroupLayout canvasLayout = new org.jdesktop.layout.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, canvasLayout.createSequentialGroup()
                .addContainerGap(517, Short.MAX_VALUE)
                .add(panner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(canvasLayout.createSequentialGroup()
                .addContainerGap()
                .add(panner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(225, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(canvas);

        org.jdesktop.layout.GroupLayout displayLayout = new org.jdesktop.layout.GroupLayout(display);
        display.setLayout(displayLayout);
        displayLayout.setHorizontalGroup(
            displayLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );
        displayLayout.setVerticalGroup(
            displayLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(display);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jToolBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jToolBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.ebixio.annotations.AnnotCanvas canvas;
    private net.java.dev.colorchooser.ColorChooser colorChooser;
    private com.ebixio.jai.ImageDisplay display;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar;
    private javax.swing.JButton jbClear;
    private javax.swing.JSlider jsBrushSize;
    private com.ebixio.jai.Panner panner;
    // End of variables declaration//GEN-END:variables
    
    // <editor-fold defaultstate="collapsed" desc=" Singleton ">
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized AnnotTopComponent getDefault() {
        if (instance == null) {
            instance = new AnnotTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the AnnotTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized AnnotTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING,
                    "Cannot find MyWindow component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof AnnotTopComponent) {
            return (AnnotTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING,
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    // </editor-fold>
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened() {
        Lookup.Template<MusicPage> mp = new Lookup.Template<MusicPage>(MusicPage.class);
        lookupResult = Utilities.actionsGlobalContext().lookup(mp);
        lookupResult.addLookupListener(this);
        //MainApp.log("AnnotTopComponent::componentOpened");
    }
    
    public void componentClosed() {
        // TODO add custom code on component closing
        lookupResult.removeLookupListener(this);
        lookupResult = null;
        MainApp.log("AnnotTopComponent::componentClosed");
    }
    
    /**
     * This function gets called every time the results change.
     * The results change to "nothing" when the focus moves away from the TopComponent
     * that contains the nodes. It gets changed to the selected node when focus returns
     * to the TopComponent, etc...
     * 
     * Since setImage is very time-consuming for large images, we want to do it only if
     * it is different from the image being currently displayed.
     */
    public void resultChanged(LookupEvent lookupEvent) {
        MainApp.log("AnnotTopComponent::resultChanged");
        Lookup.Result r = (Lookup.Result) lookupEvent.getSource();
        Collection c = r.allInstances();
        
        if (!c.isEmpty()) {
            // c is a collection of items we registered for in componentOpened
            MusicPage mp = (MusicPage) c.iterator().next();
            if ( !currentlyShowing.equals(mp.getSourceFile()) ) {
                currentlyShowing = mp.getSourceFile();
                //this.setImage(currentlyShowing);
                this.showPage(mp);
            }
        }
    }
    
    
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
           canvas.clear();
        } else if (e.getSource() instanceof ColorChooser) {
           ColorChooser cc = (ColorChooser) e.getSource();
           canvas.setPaint (cc.getColor());
        }
        brushPreview.paintImmediately(0, 0, brushPreview.getWidth(), brushPreview.getHeight());
    }
    
    public void stateChanged(ChangeEvent e) {
        if (e == null) return;
        JSlider js = (JSlider) e.getSource();
        canvas.setDiam( js.getValue() );
        brushPreview.paintImmediately(0, 0, brushPreview.getWidth(), brushPreview.getHeight());
    }

    public void showPage(MusicPage page) {
        File file = page.getSourceFile();
        if (file.exists() && file.canRead()) {
            source = JAI.create("fileload", file.toString());
        } else {
            return;
        }
        
        canvas.set(source);
        
        /* We need to wait for the imgLoader in canvas.set to finish before attempting to configure
         * the panner, or else the image won't be fully loaded when we do source.getHeight() in 
         * configurePanner() and we'll block the UI thread waiting for it to load.
         */
        SwingWorker w = new SwingWorker<Boolean, Void>() {
            @Override
            public Boolean doInBackground() {
                try {
                    if (canvas.imgLoader != null) {
                        // This call will block until imgLoader.doInBackground is finished
                        canvas.imgLoader.get();    // The returned value is irrelevant
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                return new Boolean(true);
            }
            
            @Override
            public void done() {
                configurePanner();
            }
        };
        w.execute();
        
    }
    
    public void setImage(File file) {
        if (file.exists() && file.canRead()) {
            source = JAI.create("fileload", file.toString());
        } else {
            return;
        }

        display.set(source);
        panner.set(display, source, 128);
    }
    public void setImage1(File file) {
        Graphics g = canvas.getImage().getGraphics();
        g.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());
        ImageIcon img = new ImageIcon(file.toString());
        
        g.drawImage(img.getImage(), 0, 0, img.getIconWidth(), img.getIconHeight(), null);
        img = null;
        canvas.repaint();
    }
    
    /**
     * The panner should only be shown if the image is larger than the canvas.
     */
    private void configurePanner() {
        if (source == null) {
            panner.setVisible(false);
            return;
        }
        
        // source.getWidth() (or Height) could throw an exception if the source is invalid
        try {
            /* source.getWidth/Height() will block until the image is decoded, so this function
             * should only be called after "source" has loaded its image.
             * See: showPage and ImageDisplay.set
             */
            if (source.getWidth() > canvas.getWidth() || source.getHeight() > canvas.getHeight()) {
                panner.set(canvas, source, 128);
                panner.setVisible(true);
                canvas.revalidate();
            } else {
                panner.setVisible(false);
                canvas.setOrigin(0, 0);
            }
        } catch (Exception e) {
            
        }
    }

    // <editor-fold defaultstate="collapsed" desc=" ComponentListener interface ">
    public void componentResized(ComponentEvent e) {
        configurePanner();
        this.jSplitPane1.setDividerLocation(1.0D);
    }

    public void componentMoved(ComponentEvent e) {
    }

    public void componentShown(ComponentEvent e) {
    }

    public void componentHidden(ComponentEvent e) {
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Wizzard generated ">
    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public Object readResolve() {
            return AnnotTopComponent.getDefault();
        }
    }

    /** replaces this in object stream */
    public Object writeReplace() {
        return new ResolvableHelper();
    }
    
    protected String preferredID() {
        return PREFERRED_ID;
    }
    // </editor-fold>

}
