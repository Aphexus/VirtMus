/*
 * Copyright (C) 2006-2007  Gabriel Burca (gburca dash virtmus at ebixio dot com)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package com.ebixio.annotations;

import com.ebixio.virtmus.MainApp;
import com.ebixio.virtmus.MusicPage;
import java.awt.Color;
import java.awt.RenderingHints;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.Serializable;
import java.util.Collection;
import javax.media.jai.JAI;
import javax.media.jai.PlanarImage;
import javax.swing.JSlider;
import javax.swing.SwingWorker;
import javax.swing.border.LineBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.openide.ErrorManager;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.Node;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;


/**
 * Top component which displays something.
 */
public final class AnnotTopComponent extends TopComponent
        implements ComponentListener {
       
    private static AnnotTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "com/ebixio/annotations/annot-tab-icon.png";
    
    private static final String PREFERRED_ID = "AnnotTopComponent";
    private Lookup.Result lookupResult = null;
    private PlanarImage source = null;
    private PlanarImage scaledSource = null;
    private MusicPage currentlyShowing = null;

    transient private final PropertyChangeListener eListener = new PropertyChangeListener() {
        public void propertyChange(PropertyChangeEvent evt) {
            if (ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName())) {
                //Node[] selectedNodes = (Node[]) evt.getNewValue();
                updateSelection();
            }
        }
    };
   
    private AnnotTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(AnnotTopComponent.class, "CTL_AnnotTopComponent"));
        setToolTipText(NbBundle.getMessage(AnnotTopComponent.class, "HINT_AnnotTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        //panner.setBackground(Color.red);
        panner.setBorder(new LineBorder(Color.RED, 2));
        panner.setVisible(false);
        
        this.addComponentListener(this);
        
        // Initialize the canvas with the default alpha value
        jsAlphaStateChanged(null);
        
        // Initialize the color chooser with a random bright color
        colorChooser.setColor(Color.getHSBColor((float)Math.random(), 0.9F, 0.9F));
        colorChooserActionPerformed(null);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar = new javax.swing.JToolBar();
        jPanel1 = new javax.swing.JPanel();
        jsBrushSize = new javax.swing.JSlider();
        jbClear = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        colorChooser = new net.java.dev.colorchooser.ColorChooser();
        jLabel1 = new javax.swing.JLabel();
        brushPreview = new com.ebixio.annotations.BrushPreview();
        jsZoom = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jsAlpha = new javax.swing.JSlider();
        canvasPanel = new javax.swing.JPanel();
        canvas = new com.ebixio.annotations.AnnotCanvas();
        panner = new com.ebixio.jai.Panner();

        setBackground(new java.awt.Color(153, 255, 153));
        setOpaque(true);

        jsBrushSize.setMajorTickSpacing(4);
        jsBrushSize.setMaximum(24);
        jsBrushSize.setMinimum(1);
        jsBrushSize.setToolTipText("Brush size");
        jsBrushSize.setMaximumSize(new java.awt.Dimension(200, 25));
        jsBrushSize.setValue(canvas.getDiam());
        jsBrushSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jsBrushSizeStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jbClear, "Clear");
        jbClear.setToolTipText("Remove all annotations");
        jbClear.setBorderPainted(false);
        jbClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbClearActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, "Size: ");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        colorChooser.setToolTipText("Foreground color");
        colorChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout colorChooserLayout = new org.jdesktop.layout.GroupLayout(colorChooser);
        colorChooser.setLayout(colorChooserLayout);
        colorChooserLayout.setHorizontalGroup(
            colorChooserLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 22, Short.MAX_VALUE)
        );
        colorChooserLayout.setVerticalGroup(
            colorChooserLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 10, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Color:");

        org.jdesktop.layout.GroupLayout brushPreviewLayout = new org.jdesktop.layout.GroupLayout(brushPreview);
        brushPreview.setLayout(brushPreviewLayout);
        brushPreviewLayout.setHorizontalGroup(
            brushPreviewLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 32, Short.MAX_VALUE)
        );
        brushPreviewLayout.setVerticalGroup(
            brushPreviewLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 32, Short.MAX_VALUE)
        );

        jsZoom.setMajorTickSpacing(1);
        jsZoom.setMaximum(1000);
        jsZoom.setMinimum(10);
        jsZoom.setMinorTickSpacing(1);
        jsZoom.setToolTipText("Zoom");
        jsZoom.setValue(1000);
        jsZoom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jsZoomStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, "Zoom:");
        jLabel3.setToolTipText("Zoom");

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, "Opacity:");

        jsAlpha.setMinimum(1);
        jsAlpha.setToolTipText("Opacity");
        jsAlpha.setValue(70);
        jsAlpha.setMaximumSize(new java.awt.Dimension(200, 25));
        jsAlpha.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jsAlphaStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(colorChooser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jsBrushSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(brushPreview, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jsAlpha, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jbClear)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 108, Short.MAX_VALUE)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jsZoom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(brushPreview, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4)
                    .add(jLabel2)
                    .add(colorChooser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1)
                    .add(jLabel3)
                    .add(jsZoom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jsAlpha, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbClear)
                    .add(jsBrushSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(33, 33, 33))
        );

        jToolBar.add(jPanel1);

        canvasPanel.setBackground(new java.awt.Color(0, 0, 0));

        canvas.setOpaque(true);

        panner.setBackground(new java.awt.Color(204, 204, 255));
        panner.setMaximumSize(new java.awt.Dimension(64, 100));
        panner.setMinimumSize(new java.awt.Dimension(64, 100));
        panner.setPreferredSize(new java.awt.Dimension(64, 100));

        org.jdesktop.layout.GroupLayout canvasLayout = new org.jdesktop.layout.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, canvasLayout.createSequentialGroup()
                .addContainerGap(606, Short.MAX_VALUE)
                .add(panner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(canvasLayout.createSequentialGroup()
                .addContainerGap()
                .add(panner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(217, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout canvasPanelLayout = new org.jdesktop.layout.GroupLayout(canvasPanel);
        canvasPanel.setLayout(canvasPanelLayout);
        canvasPanelLayout.setHorizontalGroup(
            canvasPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(canvas, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
        );
        canvasPanelLayout.setVerticalGroup(
            canvasPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(canvas, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jToolBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
            .add(canvasPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jToolBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(canvasPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jsZoomStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jsZoomStateChanged
        resizeImage((float)jsZoom.getValue() / (float)jsZoom.getMaximum());
    }//GEN-LAST:event_jsZoomStateChanged

    private void jsBrushSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jsBrushSizeStateChanged
        if (evt == null) return;
        JSlider js = (JSlider) evt.getSource();
        int newValue = js.getValue();
        canvas.setDiam( newValue );
        brushPreview.setDiam(newValue);
    }//GEN-LAST:event_jsBrushSizeStateChanged

    private void jbClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbClearActionPerformed
        canvas.clear();
    }//GEN-LAST:event_jbClearActionPerformed

    private void colorChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorChooserActionPerformed
        canvas.setPaint (colorChooser.getColor());
        brushPreview.setColor(colorChooser.getColor());
    }//GEN-LAST:event_colorChooserActionPerformed

    private void jsAlphaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jsAlphaStateChanged
        canvas.setAlpha(jsAlpha.getValue() / 100.0F);
    }//GEN-LAST:event_jsAlphaStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.ebixio.annotations.BrushPreview brushPreview;
    private com.ebixio.annotations.AnnotCanvas canvas;
    private javax.swing.JPanel canvasPanel;
    private net.java.dev.colorchooser.ColorChooser colorChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar jToolBar;
    private javax.swing.JButton jbClear;
    private javax.swing.JSlider jsAlpha;
    private javax.swing.JSlider jsBrushSize;
    private javax.swing.JSlider jsZoom;
    private com.ebixio.jai.Panner panner;
    // End of variables declaration//GEN-END:variables
    
    // <editor-fold defaultstate="collapsed" desc=" Singleton ">
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     * @return The AnnotTopComponent singleton
     */
    public static synchronized AnnotTopComponent getDefault() {
        if (instance == null) {
            instance = new AnnotTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the AnnotTopComponent instance. Never call {@link #getDefault} directly!
     * @return The AnnotTopComponent singleton
     */
    public static synchronized AnnotTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING,
                    "Cannot find MyWindow component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof AnnotTopComponent) {
            return (AnnotTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING,
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    // </editor-fold>
    
    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public ExplorerManager getExplorerManager() {
        return MainApp.findInstance().getExplorerManager();
    }
    @Override
    public void addNotify() {
        getExplorerManager().addPropertyChangeListener(eListener);
        super.addNotify();
    }
    @Override
    public void removeNotify() {
        super.removeNotify();
        getExplorerManager().removePropertyChangeListener(eListener);
    }
    
    /**
     * This function gets called every time the selected nodes change.
     * The results change to "nothing" when the focus moves away from the TopComponent
     * that contains the nodes. It gets changed to the selected node when focus returns
     * to the TopComponent, etc...
     * 
     * Since setImage is very time-consuming for large images, we want to do it only if
     * it is different from the image being currently displayed.
     */
    private void updateSelection() {
        Node[] nodes = getExplorerManager().getSelectedNodes();
        if (nodes.length > 0) {
            Lookup l = nodes[0].getLookup();
            Collection pages = l.lookupResult(MusicPage.class).allInstances();
            if (!pages.isEmpty()) {
                MusicPage mp = (MusicPage) pages.iterator().next();
                if (currentlyShowing != mp) {
                    currentlyShowing = mp;
                    this.showPage(mp);
                }
            }
        }
    }
    
    public void resizeImage(float scale) {
        if (source == null) {
            return;
        }
        
        if (scale < 0.1) {
            scale = 0.1F;
        } else if (scale >= 1) {
            return;
        }
        
        canvas.setScale(scale);
        
        // Use "SubsampleAverage" because it looks much better.
        RenderingHints qualityHints = new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        scaledSource = JAI.create("SubsampleAverage", source, (double)scale, (double)scale, qualityHints);

        showImage(scaledSource);
    }
    
    public void showPage(MusicPage page) {
        source = scaledSource = null;
        // Reset zoom so the change property fires when the page is scaled to fit.
        this.jsZoom.setValue(100 * 10);
        canvas.setMusicPage(page);
        
        page.setChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                canvas.repaint();
            }
        });
        
        File file = page.getSourceFile();
        if (file.exists() && file.canRead()) {
            source = JAI.create("fileload", file.toString());
        } else {
            return;
        }
        
        // Loading an image takes some time. We do it on a separate thread.
        SwingWorker w = new SwingWorker<Boolean, Void>() {
            protected Boolean doInBackground() {
                try {
                    // We don't really need the bounds, but this forces the image to load.
                    source.getBounds();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                return new Boolean(true);
            }
            
            @Override
            public void done() {
                resizeImgToFit();
            }
        };
        
        w.execute();
    }
    
    public void showImage(PlanarImage imgSource) {
        canvas.set(imgSource);
        
        /* We need to wait for the imgLoader in canvas.set to finish before attempting to configure
         * the panner, or else the image won't be fully loaded when we do source.getHeight() in 
         * configurePanner() and we'll block the UI thread waiting for it to load.
         */
        SwingWorker w = new SwingWorker<Boolean, Void>() {
            @Override
            public Boolean doInBackground() {
                try {
                    if (canvas.imgLoader != null) {
                        // This call will block until imgLoader.doInBackground is finished
                        canvas.imgLoader.get();    // The returned value is irrelevant
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                return new Boolean(true);
            }
            
            @Override
            public void done() {
                configurePanner();
            }
        };
        
        w.execute();
        
        // Need to re-paint the areas outside the canvas when the canvas shrinks
        this.canvasPanel.repaint();
    }
    
    private void resizeImgToFit() {
        if (source == null) return;
        
        double dScale = 1000 * com.ebixio.virtmus.Utils.scaleProportional(canvasPanel.getBounds(), source.getBounds());
        int scale;
        
        if (dScale < 1) {
            scale = 1;
        } else if (dScale > 1000) {
            scale = 1000;
        } else {
            scale = (int)dScale;
        }

        // If the zoom value changes, the listeners will be notified.
        this.jsZoom.setValue(scale);
    }
    
    /**
     * The panner should only be shown if the image is larger than the canvas.
     */
    private void configurePanner() {
        PlanarImage currentSource = (scaledSource != null) ? scaledSource : source;
        
        if (currentSource == null) {
            panner.setVisible(false);
            return;
        }
        
        // source.getWidth() (or Height) could throw an exception if the source is invalid
        try {
            /* source.getWidth/Height() will block until the image is decoded, so this function
             * should only be called after "source" has loaded its image.
             * See: showPage and ImageDisplay.set
             */
            if (currentSource.getWidth() > canvas.getWidth() || currentSource.getHeight() > canvas.getHeight()) {
                panner.set(canvas, currentSource, 128);
                panner.setVisible(true);
                canvas.revalidate();
            } else {
                panner.setVisible(false);
                canvas.setOrigin(0, 0);
            }
        } catch (Exception e) {
            
        }
    }

    // <editor-fold defaultstate="collapsed" desc=" ComponentListener interface ">
    public void componentResized(ComponentEvent e) {
        resizeImgToFit();
    }

    public void componentMoved(ComponentEvent e) {
    }

    public void componentShown(ComponentEvent e) {
    }

    public void componentHidden(ComponentEvent e) {
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Wizzard generated ">
    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public Object readResolve() {
            return AnnotTopComponent.getDefault();
        }
    }

    /** replaces this in object stream 
     */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }
    
    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }
    // </editor-fold>

}
